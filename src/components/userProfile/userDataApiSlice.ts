import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"

interface UserDataApiResponse {
  first_name: string
  last_name: string
  email: string
}

// Define a service using a base URL and expected endpoints
export const userDataApiSlice = createApi({
  baseQuery: fetchBaseQuery({
    baseUrl: `${import.meta.env.VITE_APP_API_URL}`, prepareHeaders: (headers, { getState }) => {
      const token = localStorage.getItem("accessToken")
      // If we have a token set in state, let's assume that we should be passing it.
      if (token) {
        headers.set("authorization", `Bearer ${token}`)
      }

      return headers
    }
  }),
  reducerPath: "UserDataApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["UserData"],
  endpoints: build => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getUserData: build.query<UserDataApiResponse, void>({
      query: () => "/auth/current/",
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: () => [{ type: "UserData" }]
    })
  })
})

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetUserDataQuery } = userDataApiSlice
