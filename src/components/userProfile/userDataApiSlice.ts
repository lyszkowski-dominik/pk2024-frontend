import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

/**
 * @property {string} first_name The `first_name` property represents the first name of the user.
 * @property {string} last_name The `last_name` property represents the last name of the user.
 * @property {string} email The `email` property represents the email of the user.
 * @property {number} id The `id` property represents the id of the user.
 */
export interface UserDataApiResponse {
  first_name: string;
  last_name: string;
  email: string;
  id: number;
}


// Define a service using a base URL and expected endpoints
export const userDataApiSlice = createApi({
  baseQuery: fetchBaseQuery({
    baseUrl: `${import.meta.env.VITE_APP_API_URL}`, prepareHeaders: (headers, { getState }) => {
      const token = localStorage.getItem('accessToken');
      // If we have a token set in state, let's assume that we should be passing it.
      if (token) {
        headers.set('authorization', `Bearer ${token}`);
      }

      return headers;
    }
  }),
  reducerPath: 'UserDataApi',
  // Tag types are used for caching and invalidation.
  tagTypes: ['UserData'],
  endpoints: build => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getUserData: build.query<UserDataApiResponse, void>({
      query: () => '/auth/current/',
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: () => [{ type: 'UserData' }]
    })
  })
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetUserDataQuery } = userDataApiSlice;
