import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

export interface Community {
  id: number;
  name: string;
  address: string;
  contact_info: string;
}

export interface CommunityDataApiResponse {
  count: number;
  next: string | null;
  previous: string | null;
  results: Community[];
}

// Define a service using a base URL and expected endpoints
export const communitiesDataApiSlice = createApi({
  baseQuery: fetchBaseQuery({
    baseUrl: `${import.meta.env.VITE_APP_API_URL}`,
    prepareHeaders: (headers, { getState }) => {
      const token = localStorage.getItem('accessToken');
      // If we have a token set in state, let's assume that we should be passing it.
      if (token) {
        headers.set('authorization', `Bearer ${token}`);
      }

      return headers;
    },
  }),
  reducerPath: 'CommunitiesDataApi',
  // Tag types are used for caching and invalidation.
  tagTypes: ['Communities'],
  endpoints: (build) => ({
    getCommunities: build.query<CommunityDataApiResponse, void>({
      query: () => '/hoas/hoas/',
      providesTags: (result) =>
        result
          ? [
              ...result.results.map(({ id }) => ({
                type: 'Communities' as const,
                id,
              })),
              { type: 'Communities', id: 'LIST' },
            ]
          : [{ type: 'Communities', id: 'LIST' }],
    }),
    getCommunityById: build.query<Community, number>({
      query: (id) => `/hoas/hoas/${id}`,
      providesTags: (result, error, id) => [{ type: 'Communities', id }],
    }),
    addCommunity: build.mutation<Community, Partial<Community>>({
      query: (community) => ({
        url: '/hoas/hoas/',
        method: 'POST',
        body: community,
      }),
      invalidatesTags: [{ type: 'Communities', id: 'LIST' }],
    }),
    updateCommunity: build.mutation<Community, Community>({
      query: (community) => ({
        url: `/hoas/hoas/${community.id}`,
        method: 'PUT',
        body: community,
      }),
      invalidatesTags: (result, error, { id }) => [{ type: 'Communities', id }],
    }),
    patchCommunity: build.mutation<
      Community,
      { id: number; data: Partial<Community> }
    >({
      query: ({ id, data }) => ({
        url: `/hoas/hoas/${id}`,
        method: 'PATCH',
        body: data,
      }),
      invalidatesTags: (result, error, { id }) => [{ type: 'Communities', id }],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const {
  useGetCommunitiesQuery,
  useGetCommunityByIdQuery,
  useAddCommunityMutation,
  useUpdateCommunityMutation,
  usePatchCommunityMutation,
} = communitiesDataApiSlice;
