import axios from 'axios';

/**
 * The type `Payload` defines the structure of an object containing user authentication data for
 * password reset.
 * @param {string} uidb64 - The `uidb64` property in the `Payload` type likely represents a unique
 * identifier encoded in base64 format. This identifier is commonly used in web applications for
 * various purposes such as identifying users or resources in a secure and compact way.
 * @param {string} token - A token is a unique string of characters that is used for authentication
 * and authorization purposes. It is often generated by a server and provided to a client for secure
 * communication and validation. In the context of the Payload type you provided, the token property
 * likely represents a token that is used for resetting a password or
 * @param {string} new_password1 - The `new_password1` property in the `Payload` type represents the
 * new password that a user wants to set.
 * @param {string} new_password2 - The `new_password2` property in the `Payload` type represents the
 * confirmation of the new password. It is used to ensure that the user has entered the new password
 * correctly by asking them to re-enter it.
 */
type Payload = {
  uidb64: string;
  token: string;
  new_password1: string;
  new_password2: string;
};

/**
 * The function `ResetPassword` sends a POST request to reset a user's password using the provided
 * token and new password.
 * @param {Payload}  - The `ResetPassword` function makes a request to the API endpoint to reset the user's password.
 * @returns The function `ResetPassword` is returning the data received from the API call if the call
 * is successful. If there is an error during the API call, it will return the error response.
 */
export const ResetPassword = async ({
  uidb64,
  token,
  new_password1,
}: Payload) => {
  const formData = new FormData();
  formData.append('new_password', new_password1);

  try {
    const { data } = await axios.post(
      `${import.meta.env.VITE_APP_API_URL}/auth/reset/${uidb64}/${token}/`,
      formData,
      {
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
    console.log(data);
    return data;
  } catch (err: any) {
    throw err.response.data;
    throw err.response.data;
  }
};
